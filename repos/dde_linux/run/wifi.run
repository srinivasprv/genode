#
# Build
#

set build_components {
	core init
	drivers/pci drivers/timer drivers/wifi
	drivers/rtc
	test/lwip/http_srv
}

lappend_if [have_spec acpi]             build_components drivers/acpi
lappend_if [have_spec pci]              build_components drivers/pci/device_pd
lappend_if [have_spec platform_arndale] build_components drivers/platform
lappend_if [have_spec gpio]             build_components drivers/gpio

build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>
	<start name="test-lwip_httpsrv">
		<resource name="RAM" quantum="5M"/>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
	</start>
	<start name="wifi_drv">
		<resource name="RAM" quantum="32M"/>
		<provides>
			<service name="Nic"/>
		</provides>
		<config mac80211_only="no">
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc">
				<vfs>
					<dir name="dev"> <log/> <rtc/>
					<jitterentropy name="random"/>
					<jitterentropy name="urandom"/>
					</dir>
					<inline name="wpa_supplicant.conf">
network={
	id_str="foobar"
	ssid="foobar"
	key_mgmt=NONE
	#key_mgmt=WPA-PSK
	#psk="foobarfoobar"
}
					</inline>
				</vfs>
			</libc>
		</config>
		<route>
			<service name="Rtc"> <any-child /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>}

append_if [have_spec acpi] config {
	<start name="acpi">
		<resource name="RAM" quantum="16M" constrain_phys="yes"/>
		<binary name="acpi_drv"/>
		<provides>
			<service name="PCI"/>
			<service name="IRQ" />
		</provides>
		<route>
			<service name="PCI"> <any-child /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>}

append_if [have_spec platform_arndale] config {
		<start name="platform_drv">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Regulator"/></provides>
		</start>}

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if [expr ![have_spec acpi] && [have_spec pci]] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="3M" constrain_phys="yes"/>
		<provides> <service name="PCI"/> </provides>
	</start> }

append config {
</config>
}

install_config $config

set firmware_modules {
	iwlwifi-6000-6.ucode
	iwlwifi-6000g2a-6.ucode
	iwlwifi-6000g2b-6.ucode
	iwlwifi-7260-8.ucode
}

foreach f $firmware_modules {
	if ![file exists bin/$f] {
		puts ""
		puts "The iwlwifi driver needs the following list of firmware images to work."
		puts "  $firmware_modules"
		puts "Please download the images from http://wireless.kernel.org/en/users/Drivers/iwlwifi into './bin'."
		exit 1
	}
}


#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer rtc_drv vfs_jitterentropy.lib.so
	ld.lib.so
	libc.lib.so libcrypto.lib.so libssl.lib.so
	wpa_driver_nl80211.lib.so wpa_supplicant.lib.so
	wifi.lib.so
	wifi_drv

	test-lwip_httpsrv lwip.lib.so
}

append boot_modules $firmware_modules

lappend_if [have_spec acpi]             boot_modules acpi_drv
lappend_if [have_spec pci]              boot_modules pci_drv
lappend_if [have_spec nova]             boot_modules pci_device_pd
lappend_if [have_spec platform_arndale] boot_modules platform_drv
lappend_if [have_spec gpio]             boot_modules gpio_drv

build_boot_image $boot_modules

run_genode_until forever

# vi: set ft=tcl :
