#
# Check if USB_RAW_DEVICE is set for Qemu
#
if {![info exists ::env(USB_RAW_DEVICE)] && [is_qemu_available]} {
	puts "\nPlease define USB_RAW_DEVICE environment variable and set it to your USB device <bus.device>\n"
	exit 0
}

#
# Build
#
set build_components {
	core init
	drivers/timer
	drivers/usb
	server/usb_terminal
	test/terminal_echo
}

lappend_if [have_spec acpi]             build_components drivers/acpi
lappend_if [have_spec pci]              build_components drivers/pci
lappend_if [have_spec pci]              build_components drivers/pci/device_pd
lappend_if [have_spec platform_arndale] build_components drivers/platform
lappend_if [have_spec gpio]             build_components drivers/gpio

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_if [have_spec platform_arndale] config {
		<start name="platform_drv">
			<resource name="RAM" quantum="1M"/>
			<provides><service name="Regulator"/></provides>
		</start>}

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if [have_spec acpi] config {
	<start name="acpi">
		<resource name="RAM" quantum="8M"/>
		<binary name="acpi_drv"/>
		<provides>
			<service name="PCI"/>
			<service name="IRQ" />
		</provides>
		<route>
			<service name="PCI"> <any-child /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>}

append_if [expr ![have_spec acpi] && [have_spec pci]] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="5M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="usb_drv">
		<resource name="RAM" quantum="7M"/>
		<provides><service name="Usb"/></provides>
		<config uhci="yes" ehci="yes" xhci="yes">
			<raw/>
		</config>
	</start>
	<start name="usb_terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
	</start>
	<start name="test-terminal_echo">
		<resource name="RAM" quantum="1M"/>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer usb_drv test-terminal_echo
	usb_terminal
}

lappend_if [have_spec acpi]             boot_modules acpi_drv
lappend_if [have_spec pci]              boot_modules pci_drv
lappend_if [have_spec nova]             boot_modules pci_device_pd
lappend_if [have_spec platform_arndale] boot_modules platform_drv
lappend_if [have_spec gpio]             boot_modules gpio_drv

build_boot_image $boot_modules

append qemu_args " -m 256 -nographic -usb  -usbdevice host:$::env(USB_RAW_DEVICE) -nographic"


run_genode_until forever
