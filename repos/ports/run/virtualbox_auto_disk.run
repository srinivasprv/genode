# Tested for nova. 
assert_spec nova
 
if {[is_qemu_available]} {
	puts "\nRun script does not support Qemu.\n"
	exit
}

set vdi_image "win7.vdi"
# Write overlay back to harddisk if set to 0
set use_ram_fs 0

set build_components { }
set boot_modules { vm_auto_disk.vbox }

set config_of_app {
	<start name="vbox" priority="-2">
		<binary name="virtualbox" />
		<resource name="RAM" quantum="1280M"/>
		<config vbox_file="vm_auto_disk.vbox" vm_name="AutoDisk">
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc">
				<vfs>}

append_if [expr $use_ram_fs] config_of_app {
					<dir name="ram">  <fs label="from_ram_fs"/> </dir>}

append config_of_app {
					<dir name="dev"> <log/> <rtc/> </dir>
					<rom name="vm_auto_disk.vbox" />
					<fs />
				</vfs>
			</libc>
		</config>
		<route>}

append_if [expr $use_ram_fs] config_of_app {
			<service name="File_system">
				<if-arg key="label" value="from_ram_fs" />
				<child name="ram_fs"/>
			</service>}

append config_of_app {
			<service name="File_system"> <child name="rump_fs"/> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
}

source ${genode_dir}/repos/ports/run/virtualbox_auto.inc

# copy vbox configuration to bin directory
exec cp ${genode_dir}/repos/ports/run/vm_auto_disk.vbox bin/.

build_boot_image $boot_modules

run_genode_until "fb resize : 1024x768@16 -> 640x480@32" 40
run_genode_until {\[init -\> vbox\].*Guest Additions capability report:.*seamless: yes, hostWindowMapping: no, graphics: yes} 240 $spawn_id

# cleanup bin directory - remove vbox file
exec rm bin/vm_auto_disk.vbox

puts "\nTest succeeded"
